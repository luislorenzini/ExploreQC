install.packages("ggplot2")
library("nlme", lib.loc="C:/Program Files/R/R-3.5.0/library")
install.packages("car")
install.packages("estimability")
install.packages("lsmeans")
install.packages("reghelper")
library("lsmeans", lib.loc="~/R/win-library/3.5")
detach("package:lsmeans", unload=TRUE)
library("lsmeans", lib.loc="~/R/win-library/3.5")
library("ggplot2", lib.loc="~/R/win-library/3.5")
library("estimability", lib.loc="~/R/win-library/3.5")
library("car", lib.loc="~/R/win-library/3.5")
library("reghelper", lib.loc="~/R/win-library/3.5")
library("stats", lib.loc="C:/Program Files/R/R-3.5.0/library")
library("nlme", lib.loc="C:/Program Files/R/R-3.5.0/library")
Solo_int_clean_NoStatus_GoNoGo=glmer(Lie~(1|Subject)+Nepsy_In*GoNoGo*Fav.Sfav*Reward*Group,data=dati_clean,family=binomial,control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
anova(Solo_int_clean_NoStatus_GoNoGo,type="3",Test="F")
Solo_int_clean_NoStatus_GoNoGo=glmer(Lie~(1|Subject)+Nepsy_In*GoNoGo*Fav.Sfav*Reward*Group,data=dati_clean,family=binomial,control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
Anova(Solo_int_clean_NoStatus_GoNoGo,type="3",Test="F")
install.packages("lmerTest")
library("digest", lib.loc="~/R/win-library/3.5")
library("estimability", lib.loc="~/R/win-library/3.5")
library("ggplot2", lib.loc="~/R/win-library/3.5")
library("lmerTest", lib.loc="~/R/win-library/3.5")
library("lsmeans", lib.loc="~/R/win-library/3.5")
library("car", lib.loc="~/R/win-library/3.5")
library("reghelper", lib.loc="~/R/win-library/3.5")
Solo_int_clean_NoStatus_GoNoGo=glmer(Lie~(1|Subject)+Nepsy_In*GoNoGo*Fav.Sfav*Reward*Group,data=dati_clean,family=binomial,control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
Anova(Solo_int_clean_NoStatus_GoNoGo,type="3",Test="F")
Solo_int_clean_NoStatus_GoNoGo=glmer(Lie~(1|Subject)+Nepsy_In*GoNoGo*Fav.Sfav*Reward*Group,data=dati_clean,family=binomial,control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
ris1 <- rep (NA, 10^5)
ciccio = rbinom(1:10, size = 1, prob = 0.5 )
ciccio
ciccio = rbinom(1:10^5, size = 1, prob = 0.5 )
ciccio
cicciomean = mean(rbinom(1:10, size = 1, prob = 0.5 ))
cicciomean
for (i in 1:10){
ris1[1] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
hist(ciccio)
hist(ris1, prob = T )
for (i in 1:10){
ris1[1] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
hist(ris1, prob = T )
ris1 <- rep (NA, 10)
for (i in 1:10){
ris1[1] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
hist(ris1, prob = T )
hist(ris1, prob=T )
for (i in 1:10){
ris1[i] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
ris1
hist(ris1, prob=T )
ris3 <- rep(NA, 10^5)
for (i in 1:10^5){
ris3[i] <- mean(rbinom(1:10^5, size = 1, prob = 0.5 ))
}
hist(ris3, prob=T )
ris3
i
ris3[2537]
ris3[2536]
ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris4[999999]
ris4[100000]
ris4[10000]
hist(ris4,, prob=T)
hist(ris4, prob=T)
ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris4
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris5 <- replicate(10^5,mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris5 <- replicate(10,mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris5 <- replicate(10^5,mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
myfunc <- function(mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
myfunc <- function mean(rbinom(1:10^5, size = 1, prob = 0.5 ))
ris5 <- sapply(ris5,mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
myfunc <- function(x) {
mean(rbinom(1:10^5, size = 1, prob = 0.5 ))}
myfunc
x
a = myfunc()
a
ris5 <- sapply(ris5, myfunc )))
ris5 <- sapply(ris5, myfunc )
ris5
ris5 <- rep(NA,10^5)
ris5 <- sapply(ris5, myfunc )
ciccio = rbinom(1:10^5, size = 1, prob = 0.5 )
ciccio
cicciomean = mean(rbinom(1:10, size = 1, prob = 0.5 ))
cicciomean
ris1 <- rep (NA, 10)
for (i in 1:10){
ris1[i] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
ris1
hist(ris1, prob=T )
ris3 <- rep(NA, 10^5)
ris3
for (i in 1:10^5){
ris3[i] <- mean(rbinom(1:10^5, size = 1, prob = 0.5 ))
}
ris3
hist(ris3, prob=T )
i
ris3[2670]
ris3[2697]
for (i in 1:10^5){
ris3[i] <- mean(rbinom(1:10^5, size = 1, prob = 0.5 ))
print(i)
}
i
ris3[4208]
ris3[4209]
#rep the function
ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris4
# create function and Use sapply
myfunc <- function(x) {
mean(rbinom(1:10^5, size = 1, prob = 0.5 ))}
ris5 <- rep(NA,10^5)
ris5 <- sapply(ris5, myfunc )
install.packages("bda")
install.packages("flexdashboard")
library(flexdashboard)
help glmer
help("graphical parameter")
shiny::runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp()
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
runApp('D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug')
getwd()
setwd("D:/")
getwd()
setwd("D:/Lavoro/QC/ExploreQC/xQC_Visualization_Tool_debug/")
qc_data_all = read.csv(file.path("dataframes", "QCed_data.csv"))
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
qc_data_all$Site
qc_data_all[1,1]
substr(qc_data_all[1,1], 2,4)
substr(qc_data_all[:,1], 2,4)
substr(qc_data_all[,1], 2,4)
qc_data_all$Site<- substr(qc_data_all[,1], 2,4)
qc_data_all$Site
View(qc_data_all)
qc_data_all$patient<- substr(qc_data_all[,1], 2,13)
qc_data_all$patient
write.csv(qc_data_all, file = "dataframes/QC.csv")
runApp()
runApp()
runApp()
runApp()
runApp()
str(qc_data_all)
qc_data_all$Site<- substr(qc_data_all[,1], 2,4)
qc_data_all$patient<- substr(qc_data_all[,1], 2,13)
str(qc_data_all$Site)
as.factor(qc_data_all$Site)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
read.table(file.path("dataframes", "QC.xlsx"))
getwd()
read.table(file.path("dataframes", "QC.xlsx"))
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
#Manage Site and patient name, This is temporary since is specific for EPAD study
qc_data_all$Site <- as.factor(qc_data_all$Site)
str(qc_data_all)
qc_data_all$patient
qc_data_all$Structural = rep("Passed",nrow(qc_data_all))
qc_data_all$Structural = as.character(qc_data_all$Structural)
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers")
scatter1 %>% layout(title = paste('Within-Site Distribution Site', input$site),
xaxis = list(title = 'Subjects' ,
zeroline = FALSE),
yaxis = list(title = input$QCpar, zeroline = FALSE ), showlegend = TRUE)
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers")
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
qc_data_all$Structural
qc_data_all$Structural[2:30]
qc_data_all$Structural[2:30] = "Failed"
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers")
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2))))
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2)))
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
pal <- c("red", "blue", "green")
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", colors = pal)
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
qc_data_all$Structural[2:30] = "Passed"
pal <- c("red", "green")
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", colors = pal)
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
qc_data_all$Structural[2:30] = "Failed"
pal <- c("red", "green")
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", colors = pal)
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", colors = pal,
markers = list(size =10, line = list(color = pal, width = 2) ))
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", colors = pal,
marker = list(size =10, line = list(color = pal, width = 2) ))
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", colors = pal,
marker = list(size =10, line = list(color = pal, width = 2) ))
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", colors = pal,
marker = list(size =10, line = list(color = "grey", width = 2) ))
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
scatter1 <- plot_ly(data = qc_data_all, x = ~qc_data_all$patient, y = ~qc_data_all$Structural_Noise_SNR_GM_Ratio, color = ~qc_data_all$Structural, type = "scatter", mode = "markers", colors = pal,
marker = list(size =10, line = list(color = "black", width = 2) ))
scatter1 %>% layout(title = 'Within-Site Distribution Site',
xaxis = list(title = 'Subjects',
zeroline = FALSE),
yaxis = list(title = "Structural_Noise_SNR_GM_Ratio", zeroline = FALSE ), showlegend = TRUE)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot_ly() %>%
add_segments(x = 4, xend = 4, y = 0, yend = 10) %>%
add_segments(x = 3, xend = 5, y = 5, yend = 5)
plot_ly() %>%
add_segments(x = 4, y = 0)
plot_ly() %>%
add_segments(x = 4, xend = 4, y = 0, yend = 10)
plot_ly() %>%
add_segments(x = 3, xend = 5, y = 5, yend = 5)
plot_ly() %>%
plot_ly() %>%
plot_ly() %>%
layout(shapes=list(type='line', x0= 0.2, x1= 0.2, y0=min(allyvalues), y1=max(allyvalues)))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
row(qc_data_all)
row(qc_data_all)[1]
row(qc_data_all)[2]
qc_data_all = qc_data_all(which(qc_data_all$Site == '040'), )
qc_data_all = qc_data_all[which(qc_data_all$Site == '040'), ]
row(qc_data_all)[2]
View(qc_data_all)
qc_data_all$Site
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
qc_data_all$Site
source('~/.active-rstudio-document', echo=TRUE)
qc_data_all = qc_data_all[which(qc_data_all$Site == '40'), ]
row(qc_data_all)[2]
runApp()
row.names(qc_data_all)
row.names(qc_data_all)[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
