xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
if (between(xF, 1, 2)){ # 1 or 2 outliers
sitdf$Functional[isub] <- "Questionable"
} else if (xF > 2){
sitdf$Functional[isub] <- "Bad"
}
# DTI
xD = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Diffusion')], na.rm = TRUE)
if (between(xD, 1, 2)){ # 1 or 2 outliers
sitdf$Diffusion[isub] <- "Questionable"
} else if (xD > 2){
sitdf$Diffusion[isub] <- "Bad"
}
}
# Put the results in the main dataframe
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Structural'] <- sitdf$Structural
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Functional'] <- sitdf$Functional
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Diffusion'] <- sitdf$Diffusion
}
}
#Manage Site and patient name, This is temporary since is specific for EPAD study
qc_data_all$Site <- as.factor(qc_data_all$Site)
runApp()
#Read the Configuration File and set variables
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
analysisdir = configuration[which(configuration$Visualization.Module == 'AnalysisDir'), 'VIS_properties']
######### Functions #########
#Define Function to find outliers
isout <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
outliers = data.frame(matrix(NA, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(outliers)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
outliers[iobs, ivar] = NA
} else if (dfofint[iobs, ivar] >= (mean(dfofint[,ivar], na.rm = TRUE) + 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else if (dfofint[iobs, ivar] <= (mean(dfofint[,ivar], na.rm = TRUE) - 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else {
outliers[iobs, ivar] = 0
}
}
}
return(outliers)
}
#Read the Configuration File and set variables
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
analysisdir = configuration[which(configuration$Visualization.Module == 'AnalysisDir'), 'VIS_properties']
T1image = configuration[which(configuration$Visualization.Module == 'StructIm'), 'VIS_properties']
FunctionalFold = configuration[which(configuration$Visualization.Module == 'FuncFold'), 'VIS_properties']
FunctionalImage = configuration[which(configuration$Visualization.Module == 'FuncIm'), 'VIS_properties']
DiffFolder = configuration[which(configuration$Visualization.Module == 'DiffFold'), 'VIS_properties']
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
qc_data_all$Structural = rep("Good",nrow(qc_data_all))
qc_data_all
qc_data_all$Functional = rep("Good",nrow(qc_data_all))
qc_data_all$Diffusion = rep("Good",nrow(qc_data_all))
qc_data_all$ASL = rep("Good",nrow(qc_data_all))
# If it's the first time we need to flag scans
# Flag using defined function
for (isit in unique(qc_data_all$Site)){
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
for (isub in c(1:nrow(sitdf))){
# structural
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
if (between(xS, 1, 2)){ # 1 or 2 outliers
sitdf$Structural[isub] <- "Questionable"
} else if (xS > 2){
sitdf$Structural[isub] <- "Bad"
}
# functional
xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
if (between(xF, 1, 2)){ # 1 or 2 outliers
sitdf$Functional[isub] <- "Questionable"
} else if (xF > 2){
sitdf$Functional[isub] <- "Bad"
}
# DTI
xD = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Diffusion')], na.rm = TRUE)
if (between(xD, 1, 2)){ # 1 or 2 outliers
sitdf$Diffusion[isub] <- "Questionable"
} else if (xD > 2){
sitdf$Diffusion[isub] <- "Bad"
}
}
# Put the results in the main dataframe
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Structural'] <- sitdf$Structural
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Functional'] <- sitdf$Functional
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Diffusion'] <- sitdf$Diffusion
}
View(qc_data_all)
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
qc_data_all$Structural = rep("Good",nrow(qc_data_all))
qc_data_all$Functional = rep("Good",nrow(qc_data_all))
qc_data_all$Diffusion = rep("Good",nrow(qc_data_all))
qc_data_all$ASL = rep("Good",nrow(qc_data_all))
qc_data_all[qc_data_all == 0] <- NA
View(qc_data_all)
str(qc_data_all$Functional_Motion_MotionMean_mm)
str(qc_data_all$Functional_Motion_GhostToSignal)
qc_data_all[qc_data_all == NaN]
sum(qc_data_all[qc_data_all == NaN])
is.na(qc_data_all)
prova = is.na(qc_data_all)
View(prova)
isit = 1
unique(qc_data_all$Site)
isit = 10
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
isout(sitdf)
df <- sitdf
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
dfofint
outliers = data.frame(matrix(NA, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(outliers)<- colnames(df[, nums])
View(sitoutliers)
# If it's the first time we need to flag scans
# Flag using defined function
for (isit in unique(qc_data_all$Site)){
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
for (isub in c(1:nrow(sitdf))){
# structural
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
if (between(xS, 1, 2)){ # 1 or 2 outliers
sitdf$Structural[isub] <- "Questionable"
} else if (xS > 2){
sitdf$Structural[isub] <- "Bad"
}
# functional
xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
if (between(xF, 1, 2)){ # 1 or 2 outliers
sitdf$Functional[isub] <- "Questionable"
} else if (xF > 2){
sitdf$Functional[isub] <- "Bad"
}
# DTI
xD = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Diffusion')], na.rm = TRUE)
if (between(xD, 1, 2)){ # 1 or 2 outliers
sitdf$Diffusion[isub] <- "Questionable"
} else if (xD > 2){
sitdf$Diffusion[isub] <- "Bad"
}
}
# Put the results in the main dataframe
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Structural'] <- sitdf$Structural
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Functional'] <- sitdf$Functional
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Diffusion'] <- sitdf$Diffusion
}
isub
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
between(xS, 1, 2)
xS > 2
sitdf$Structural[isub]
xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')]
#Read the Configuration File and set variables
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
analysisdir = configuration[which(configuration$Visualization.Module == 'AnalysisDir'), 'VIS_properties']
T1image = configuration[which(configuration$Visualization.Module == 'StructIm'), 'VIS_properties']
FunctionalFold = configuration[which(configuration$Visualization.Module == 'FuncFold'), 'VIS_properties']
FunctionalImage = configuration[which(configuration$Visualization.Module == 'FuncIm'), 'VIS_properties']
DiffFolder = configuration[which(configuration$Visualization.Module == 'DiffFold'), 'VIS_properties']
DiffImage = configuration[which(configuration$Visualization.Module == 'DiffIm'), 'VIS_properties']
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
qc_data_all$Structural = rep("Good",nrow(qc_data_all))
# qc_data_all$Structural = as.character(qc_data_all$Structural)
qc_data_all$Functional = rep("Good",nrow(qc_data_all))
qc_data_all$Diffusion = rep("Good",nrow(qc_data_all))
qc_data_all$ASL = rep("Good",nrow(qc_data_all))
isit = 1
isit = 10
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
isub = 1
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
if (between(xS, 1, 2)){ # 1 or 2 outliers
sitdf$Structural[isub] <- "Questionable"
} else if (xS > 2){
sitdf$Structural[isub] <- "Bad"
}
xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')]
View(outliers)
View(sitoutliers)
View(sitdf)
is.numeric(outliers$Functional_Motion_GhostToSignal)
######### Functions #########
#Define Function to find outliers
isout <-  function(df){
nums <- unlist(lapply(df, is.numeric))
dfofint <- df[, nums]
outliers = data.frame(matrix(NaN, nrow = nrow(dfofint), ncol = ncol(dfofint)))
colnames(outliers)<- colnames(df[, nums])
for (iobs in c(1:nrow(dfofint))) {
for (ivar in c(1:ncol(dfofint))){
if(is.na(dfofint[iobs, ivar])) {
outliers[iobs, ivar] = NaN
} else if (dfofint[iobs, ivar] >= (mean(dfofint[,ivar], na.rm = TRUE) + 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else if (dfofint[iobs, ivar] <= (mean(dfofint[,ivar], na.rm = TRUE) - 1.96*sd(dfofint[,ivar], na.rm = TRUE))){
outliers[iobs, ivar] = 1
} else {
outliers[iobs, ivar] = 0
}
}
}
return(outliers)
}
#Read the Configuration File and set variables
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
analysisdir = configuration[which(configuration$Visualization.Module == 'AnalysisDir'), 'VIS_properties']
T1image = configuration[which(configuration$Visualization.Module == 'StructIm'), 'VIS_properties']
FunctionalFold = configuration[which(configuration$Visualization.Module == 'FuncFold'), 'VIS_properties']
FunctionalImage = configuration[which(configuration$Visualization.Module == 'FuncIm'), 'VIS_properties']
DiffFolder = configuration[which(configuration$Visualization.Module == 'DiffFold'), 'VIS_properties']
DiffImage = configuration[which(configuration$Visualization.Module == 'DiffIm'), 'VIS_properties']
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
qc_data_all$Structural = rep("Good",nrow(qc_data_all))
qc_data_all$Functional = rep("Good",nrow(qc_data_all))
qc_data_all$Diffusion = rep("Good",nrow(qc_data_all))
qc_data_all$ASL = rep("Good",nrow(qc_data_all))
#this won't be needed later
qc_data_all[qc_data_all == 0] <- NaN
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
# structural
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
if (between(xS, 1, 2)){ # 1 or 2 outliers
sitdf$Structural[isub] <- "Questionable"
} else if (xS > 2){
sitdf$Structural[isub] <- "Bad"
}
# functional
xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
if (between(xF, 1, 2)){ # 1 or 2 outliers
sitdf$Functional[isub] <- "Questionable"
} else if (xF > 2){
sitdf$Functional[isub] <- "Bad"
}
View(sitoutliers)
sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
runApp()
shiny::runApp()
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 2)
View(configuration)
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 3)
includeparms = openxlsx::read.xlsx("../ConfigFile.xlsx", 3)
View(includeparms)
includeparms = includeparms[,c(1:3,5)]
includeparms  = [c(which(includeparms$Visualize == 1)),]
includeparms$Visualize == 1
includeparms  = includeparms[c(which(includeparms$Visualize == 1)),]
includeparms
parmstoinclude =
paste0(includeparms$Scantype, includeparms$Domain, includeparms$Parameter)
parmstoinclude
View(qc_data_all)
qc_data_all[parmstoinclude]
qc_data_all[,parmstoinclude]
parmstoinclude
qc_data_all[,parmstoinclude[1]]
parmstoinclude[1]
qc_data_all[,"StructuralNoiseSNR_GM_Ratio"]
colnames(qc_data_all)
parmstoinclude = paste(includeparms$Scantype, includeparms$Domain, includeparms$Parameter, sep = '_')
parmstoinclude
qc_data_all[,parmstoinclude]
parmstoinclude
colnames(qc_data_all)
qc_data_all[,"Structural_Noise_SNR_GM_Ratio"]
parmstoinclude
qc_data_all[,"Structural_Noise_SNR_GM_Ratio"]
qc_data_all[,parmstoinclude[:]]
qc_data_all[parmstoinclude]
parmstoinclude
qc_data_all[, ..parmstoinclude]
as.list(parmstoinclude)
qc_data_all[, as.list(parmstoinclude)]
names(qc_data_all)
names(qc_data_all) %in% parmstoinclude
qc_data_all[, names(qc_data_all) %in% parmstoinclude]
shiny::runApp()
runApp()
runApp()
includeparms = openxlsx::read.xlsx("../ConfigFile.xlsx", 3)
includeparms = includeparms[,c(1:3,5)]
includeparms  = includeparms[c(which(includeparms$Visualize == 1)),]
parmstoinclude = paste(includeparms$Scantype, includeparms$Domain, includeparms$Parameter, sep = '_')
qc_data_all <- qc_data_all[, names(qc_data_all) %in% parmstoinclude]
View(qc_data_all)
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
#Subset based on variables you want to visualize (from configuration file)
includeparms = openxlsx::read.xlsx("../ConfigFile.xlsx", 3)
includeparms = includeparms[,c(1:3,5)]
includeparms  = includeparms[c(which(includeparms$Visualize == 1)),]
includeparms
parmstoinclude = paste(includeparms$Scantype, includeparms$Domain, includeparms$Parameter, sep = '_')
parmstoinclude
names(qc_data_all) %in% parmstoinclude
qc_data_all <- qc_data_all[, names(qc_data_all) %in% parmstoinclude]
runApp()
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
#Subset based on variables you want to visualize (from configuration file)
includeparms = openxlsx::read.xlsx("../ConfigFile.xlsx", 3)
includeparms = includeparms[,c(1:3,5)]
includeparms  = includeparms[c(which(includeparms$Visualize == 1)),]
parmstoinclude = paste(includeparms$Scantype, includeparms$Domain, includeparms$Parameter, sep = '_')
qc_data_all <- qc_data_all[, names(qc_data_all) %in% parmstoinclude]
qc_data_all$Structural = rep("Good",nrow(qc_data_all))
qc_data_all$Functional = rep("Good",nrow(qc_data_all))
qc_data_all$Diffusion = rep("Good",nrow(qc_data_all))
qc_data_all$ASL = rep("Good",nrow(qc_data_all))
#this won't be needed later
qc_data_all[qc_data_all == 0] <- NaN
# If it's the first time we need to flag scans
# Flag using defined function
for (isit in unique(qc_data_all$Site)){
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
for (isub in c(1:nrow(sitdf))){
# structural
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
if (between(xS, 1, 2)){ # 1 or 2 outliers
sitdf$Structural[isub] <- "Questionable"
} else if (xS > 2){
sitdf$Structural[isub] <- "Bad"
}
# functional
xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
if (between(xF, 1, 2)){ # 1 or 2 outliers
sitdf$Functional[isub] <- "Questionable"
} else if (xF > 2){
sitdf$Functional[isub] <- "Bad"
}
# DTI
xD = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Diffusion')], na.rm = TRUE)
if (between(xD, 1, 2)){ # 1 or 2 outliers
sitdf$Diffusion[isub] <- "Questionable"
} else if (xD > 2){
sitdf$Diffusion[isub] <- "Bad"
}
}
# Put the results in the main dataframe
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Structural'] <- sitdf$Structural
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Functional'] <- sitdf$Functional
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Diffusion'] <- sitdf$Diffusion
# If it's the first time we need to flag scans
# Flag using defined function
for (isit in unique(qc_data_all$Site)){
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
for (isub in c(1:nrow(sitdf))){
# structural
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
if (between(xS, 1, 2)){ # 1 or 2 outliers
sitdf$Structural[isub] <- "Questionable"
} else if (xS > 2){
sitdf$Structural[isub] <- "Bad"
}
# functional
xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
if (between(xF, 1, 2)){ # 1 or 2 outliers
sitdf$Functional[isub] <- "Questionable"
} else if (xF > 2){
sitdf$Functional[isub] <- "Bad"
}
# DTI
xD = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Diffusion')], na.rm = TRUE)
if (between(xD, 1, 2)){ # 1 or 2 outliers
sitdf$Diffusion[isub] <- "Questionable"
} else if (xD > 2){
sitdf$Diffusion[isub] <- "Bad"
}
}
# Put the results in the main dataframe
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Structural'] <- sitdf$Structural
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Functional'] <- sitdf$Functional
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Diffusion'] <- sitdf$Diffusion
}
# Set directory (tmp) and read the output of xQC_Master
if (file.exists(file.path("dataframes", "QCed_data.csv"))) {
qc_data_all = read.csv(file.path("dataframes", "QCed_data.csv"))
print("One previous file has been found, starting from there. Delete the file to start over")
} else {
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
#Subset based on variables you want to visualize (from configuration file)
includeparms = openxlsx::read.xlsx("../ConfigFile.xlsx", 3)
includeparms = includeparms[,c(1:3,5)]
includeparms  = includeparms[c(which(includeparms$Visualize == 1)),]
parmstoinclude = paste(includeparms$Scantype, includeparms$Domain, includeparms$Parameter, sep = '_')
qc_data_all <- qc_data_all[, names(qc_data_all) %in% parmstoinclude]
qc_data_all$Structural = rep("Good",nrow(qc_data_all))
qc_data_all$Functional = rep("Good",nrow(qc_data_all))
qc_data_all$Diffusion = rep("Good",nrow(qc_data_all))
qc_data_all$ASL = rep("Good",nrow(qc_data_all))
#this won't be needed later
qc_data_all[qc_data_all == 0] <- NaN
# If it's the first time we need to flag scans
# Flag using defined function
for (isit in unique(qc_data_all$Site)){
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
for (isub in c(1:nrow(sitdf))){
# structural
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
if (between(xS, 1, 2)){ # 1 or 2 outliers
sitdf$Structural[isub] <- "Questionable"
} else if (xS > 2){
sitdf$Structural[isub] <- "Bad"
}
# functional
xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
if (between(xF, 1, 2)){ # 1 or 2 outliers
sitdf$Functional[isub] <- "Questionable"
} else if (xF > 2){
sitdf$Functional[isub] <- "Bad"
}
# DTI
xD = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Diffusion')], na.rm = TRUE)
if (between(xD, 1, 2)){ # 1 or 2 outliers
sitdf$Diffusion[isub] <- "Questionable"
} else if (xD > 2){
sitdf$Diffusion[isub] <- "Bad"
}
}
# Put the results in the main dataframe
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Structural'] <- sitdf$Structural
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Functional'] <- sitdf$Functional
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Diffusion'] <- sitdf$Diffusion
}
}
#Read the Configuration File and set variables
configuration = openxlsx::read.xlsx("../ConfigFile.xlsx", 1)
analysisdir = configuration[which(configuration$Visualization.Module == 'AnalysisDir'), 'VIS_properties']
T1image = configuration[which(configuration$Visualization.Module == 'StructIm'), 'VIS_properties']
FunctionalFold = configuration[which(configuration$Visualization.Module == 'FuncFold'), 'VIS_properties']
FunctionalImage = configuration[which(configuration$Visualization.Module == 'FuncIm'), 'VIS_properties']
DiffFolder = configuration[which(configuration$Visualization.Module == 'DiffFold'), 'VIS_properties']
DiffImage = configuration[which(configuration$Visualization.Module == 'DiffIm'), 'VIS_properties']
# Set directory (tmp) and read the output of xQC_Master
if (file.exists(file.path("dataframes", "QCed_data.csv"))) {
qc_data_all = read.csv(file.path("dataframes", "QCed_data.csv"))
print("One previous file has been found, starting from there. Delete the file to start over")
} else {
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
#Subset based on variables you want to visualize (from configuration file)
includeparms = openxlsx::read.xlsx("../ConfigFile.xlsx", 3)
includeparms = includeparms[,c(1:3,5)]
includeparms  = includeparms[c(which(includeparms$Visualize == 1)),]
parmstoinclude = paste(includeparms$Scantype, includeparms$Domain, includeparms$Parameter, sep = '_')
qc_data_all <- qc_data_all[, names(qc_data_all) %in% parmstoinclude]
qc_data_all$Structural = rep("Good",nrow(qc_data_all))
qc_data_all$Functional = rep("Good",nrow(qc_data_all))
qc_data_all$Diffusion = rep("Good",nrow(qc_data_all))
qc_data_all$ASL = rep("Good",nrow(qc_data_all))
#this won't be needed later
qc_data_all[qc_data_all == 0] <- NaN
# If it's the first time we need to flag scans
# Flag using defined function
for (isit in unique(qc_data_all$Site)){
sitdf <- qc_data_all[which(as.character(qc_data_all$Site) ==isit),]
sitoutliers <- isout(sitdf)
for (isub in c(1:nrow(sitdf))){
# structural
xS = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Structural')], na.rm = TRUE)
if (between(xS, 1, 2)){ # 1 or 2 outliers
sitdf$Structural[isub] <- "Questionable"
} else if (xS > 2){
sitdf$Structural[isub] <- "Bad"
}
# functional
xF = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Functional')], na.rm = TRUE)
if (between(xF, 1, 2)){ # 1 or 2 outliers
sitdf$Functional[isub] <- "Questionable"
} else if (xF > 2){
sitdf$Functional[isub] <- "Bad"
}
# DTI
xD = sum(sitoutliers[isub,startsWith(colnames(sitoutliers), 'Diffusion')], na.rm = TRUE)
if (between(xD, 1, 2)){ # 1 or 2 outliers
sitdf$Diffusion[isub] <- "Questionable"
} else if (xD > 2){
sitdf$Diffusion[isub] <- "Bad"
}
}
# Put the results in the main dataframe
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Structural'] <- sitdf$Structural
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Functional'] <- sitdf$Functional
qc_data_all[which(as.character(qc_data_all$Site) ==isit),'Diffusion'] <- sitdf$Diffusion
}
}
qc_data_all
as.factor(qc_data_all$Site)
qc_data_all$Site
qc_data_all = read.csv(file.path("dataframes", "QC.csv"))
View(qc_data_all)
c("Subject", parmstoinclude)
c("Subject", "Site", parmstoinclude)
View(qc_data_all)
runApp()
runApp()
runApp()
runApp()
runApp()
