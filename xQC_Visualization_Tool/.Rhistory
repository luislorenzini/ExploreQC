install.packages("ggplot2")
library("nlme", lib.loc="C:/Program Files/R/R-3.5.0/library")
install.packages("car")
install.packages("estimability")
install.packages("lsmeans")
install.packages("reghelper")
library("lsmeans", lib.loc="~/R/win-library/3.5")
detach("package:lsmeans", unload=TRUE)
library("lsmeans", lib.loc="~/R/win-library/3.5")
library("ggplot2", lib.loc="~/R/win-library/3.5")
library("estimability", lib.loc="~/R/win-library/3.5")
library("car", lib.loc="~/R/win-library/3.5")
library("reghelper", lib.loc="~/R/win-library/3.5")
library("stats", lib.loc="C:/Program Files/R/R-3.5.0/library")
library("nlme", lib.loc="C:/Program Files/R/R-3.5.0/library")
Solo_int_clean_NoStatus_GoNoGo=glmer(Lie~(1|Subject)+Nepsy_In*GoNoGo*Fav.Sfav*Reward*Group,data=dati_clean,family=binomial,control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
anova(Solo_int_clean_NoStatus_GoNoGo,type="3",Test="F")
Solo_int_clean_NoStatus_GoNoGo=glmer(Lie~(1|Subject)+Nepsy_In*GoNoGo*Fav.Sfav*Reward*Group,data=dati_clean,family=binomial,control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
Anova(Solo_int_clean_NoStatus_GoNoGo,type="3",Test="F")
install.packages("lmerTest")
library("digest", lib.loc="~/R/win-library/3.5")
library("estimability", lib.loc="~/R/win-library/3.5")
library("ggplot2", lib.loc="~/R/win-library/3.5")
library("lmerTest", lib.loc="~/R/win-library/3.5")
library("lsmeans", lib.loc="~/R/win-library/3.5")
library("car", lib.loc="~/R/win-library/3.5")
library("reghelper", lib.loc="~/R/win-library/3.5")
Solo_int_clean_NoStatus_GoNoGo=glmer(Lie~(1|Subject)+Nepsy_In*GoNoGo*Fav.Sfav*Reward*Group,data=dati_clean,family=binomial,control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
Anova(Solo_int_clean_NoStatus_GoNoGo,type="3",Test="F")
Solo_int_clean_NoStatus_GoNoGo=glmer(Lie~(1|Subject)+Nepsy_In*GoNoGo*Fav.Sfav*Reward*Group,data=dati_clean,family=binomial,control = glmerControl(optimizer = "nloptwrap", calc.derivs = FALSE))
ris1 <- rep (NA, 10^5)
ciccio = rbinom(1:10, size = 1, prob = 0.5 )
ciccio
ciccio = rbinom(1:10^5, size = 1, prob = 0.5 )
ciccio
cicciomean = mean(rbinom(1:10, size = 1, prob = 0.5 ))
cicciomean
for (i in 1:10){
ris1[1] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
hist(ciccio)
hist(ris1, prob = T )
for (i in 1:10){
ris1[1] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
hist(ris1, prob = T )
ris1 <- rep (NA, 10)
for (i in 1:10){
ris1[1] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
hist(ris1, prob = T )
hist(ris1, prob=T )
for (i in 1:10){
ris1[i] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
ris1
hist(ris1, prob=T )
ris3 <- rep(NA, 10^5)
for (i in 1:10^5){
ris3[i] <- mean(rbinom(1:10^5, size = 1, prob = 0.5 ))
}
hist(ris3, prob=T )
ris3
i
ris3[2537]
ris3[2536]
ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris4[999999]
ris4[100000]
ris4[10000]
hist(ris4,, prob=T)
hist(ris4, prob=T)
ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris4
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris5 <- replicate(10^5,mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris5 <- replicate(10,mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris5 <- replicate(10^5,mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
myfunc <- function(mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
myfunc <- function mean(rbinom(1:10^5, size = 1, prob = 0.5 ))
ris5 <- sapply(ris5,mean(rbinom(1:10^5, size = 1, prob = 0.5 )))
#ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
myfunc <- function(x) {
mean(rbinom(1:10^5, size = 1, prob = 0.5 ))}
myfunc
x
a = myfunc()
a
ris5 <- sapply(ris5, myfunc )))
ris5 <- sapply(ris5, myfunc )
ris5
ris5 <- rep(NA,10^5)
ris5 <- sapply(ris5, myfunc )
ciccio = rbinom(1:10^5, size = 1, prob = 0.5 )
ciccio
cicciomean = mean(rbinom(1:10, size = 1, prob = 0.5 ))
cicciomean
ris1 <- rep (NA, 10)
for (i in 1:10){
ris1[i] <- mean(rbinom(1:10, size = 1, prob = 0.5 ))
}
ris1
hist(ris1, prob=T )
ris3 <- rep(NA, 10^5)
ris3
for (i in 1:10^5){
ris3[i] <- mean(rbinom(1:10^5, size = 1, prob = 0.5 ))
}
ris3
hist(ris3, prob=T )
i
ris3[2670]
ris3[2697]
for (i in 1:10^5){
ris3[i] <- mean(rbinom(1:10^5, size = 1, prob = 0.5 ))
print(i)
}
i
ris3[4208]
ris3[4209]
#rep the function
ris4 <- rep(mean(rbinom(1:10^5, size = 1, prob = 0.5 )), 10^5)
ris4
# create function and Use sapply
myfunc <- function(x) {
mean(rbinom(1:10^5, size = 1, prob = 0.5 ))}
ris5 <- rep(NA,10^5)
ris5 <- sapply(ris5, myfunc )
install.packages("bda")
install.packages("flexdashboard")
library(flexdashboard)
help glmer
help("graphical parameter")
citation('shiny')
shiny::runApp('D:/GitHub/ExploreQC/xQC_Visualization_Tool')
shiny::runApp('D:/GitHub/ExploreQC/xQC_Visualization_Tool')
shiny::runApp('D:/GitHub/ExploreQC/xQC_Visualization_Tool')
shiny::runApp('D:/GitHub/ExploreQC/xQC_Visualization_Tool')
